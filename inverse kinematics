function [q, iter_taken, err] = rob_ikine1(r, p, treshold, max_iter)
    % Compute the inverse kinematics by using the pseudo-inverse method
    %
    % https://groups.csail.mit.edu/drl/journal_club/papers/033005/buss-2004.pdf
    % See Equ. 7.
    
%     q = r.qc;
%     T =  rob_fkine(r, q);
%     x = T(1:3, 4, end);
    % Calculate the transformation matrix
    %     T = getTransformationMatrix1_2(x, y, z, r.ypr(3), r.ypr(2), yaw);
    
    % Extract the position and orientation from the transformation matrix
    
    if nargin  < 3
        treshold = 0.01;
        max_iter = 100;
    elseif nargin  < 4
        max_iter = 100;
    end
    
    % Get current pose.
    q = r.qc;
    T =  rob_fkine(r, q);
    x = T(1:3, 4, end);
    jac = rob_jac(r, q);
    
    iter_taken = 1;
    
    while 1
        iter_taken = iter_taken + 1;
        
        delta_x = p - x;
        
        delta_q = pinv(jac)*delta_x;
        q = q + delta_q;
        q = min(r.ub, max(q, r.lb)); % This is a saturation function.
        
        [~, x] = rob_fkine_ee(r, q);
        jac = rob_jac(r, q);
        
        err = norm(delta_x);
        
        if err < treshold || iter_taken > max_iter
%             fprintf('*rob_ikine1* breaks after %i iterations with errror %f.\n', k, err);
            break;
        end
    end
     T =  rob_fkine(r, q);
    [roll, pitch, yaw] = rotationMatrixToEulerAngles(T(1:3,1:3,end));

    disp(['ikine', ' q = ', num2str(rad2deg(q(:,1)'))]);
    disp(['XYZ desiered: ', num2str(p')]);
    disp(['XYZ actual: ', num2str((T(1:3,4,end))')]);
    disp(['ypr desiered:',num2str(rad2deg(r.ypr))]);
    disp(['ypr actual:',num2str([yaw, pitch, roll])]);
end
