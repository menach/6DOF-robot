function [r, r_1] = plot_straight_line(r,r_1 ,p_end, g,g_1)
    p_start =r.T(1:3,4,end)';
    step_count = norm([p_start, p_end])* 10;
    x_steps = linspace(p_start(1), p_end(1), step_count);
    y_steps = linspace(p_start(2), p_end(2), step_count);
    z_steps = linspace(p_start(3), p_end(3), step_count);
    plot3(x_steps,y_steps,z_steps);
    % robot control loop
    for i = 1:step_count
        % set target position for this step
        p_target = [x_steps(i); y_steps(i); z_steps(i)];
        q = calculate_joint_angles(r, p_target);
%         [~] = inverseKinematics(r, p_target);
        [q_1, k, err] = rob_ikine1(r_1, p_target, 0.001, 1000);
%         update the robot state with the new joint angles
%         update the robot visualization
        r_1 = rob_self_update(r_1, q_1);
        g_1 = nrob_plot(g_1, r_1);
        if q~=-1
            r = rob_self_update(r, q);
            g = nrob_plot(g, r);
            % pause for a little while (0.1 seconds)
%             pause(0.02);
        end
    end
end
